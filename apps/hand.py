import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from apps.key import main_kb, categories, items
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import apps.database.requests as rq
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apps.database.requests import create_support_ticket, get_user_by_tg_id
from aiogram.filters import StateFilter
from apps.database.requests import create_bonus_ticket

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(
        'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–æ—Ç! üåü\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π.',
        reply_markup=main_kb
    )
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá',
        reply_markup=main_kb
    )

@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer(
        'üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:',
        reply_markup=await categories()
    )

@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
    category_id = callback.data.split('_')[1]
    await callback.message.answer(
        'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:',
        reply_markup=await items(category_id)
    )

@router.callback_query(F.data.startswith('item_'))
async def show_item(callback: CallbackQuery):
    item_id = callback.data.split('_')[1]
    item_data = await rq.get_item(item_id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', 
        callback_data=f'category_{item_data.category}'
    ))
    keyboard.add(InlineKeyboardButton(
        text='üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 
        callback_data='back_to_categories'
    ))
    keyboard.add(InlineKeyboardButton(
        text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 
        callback_data='to_main'
    ))
    
    await callback.message.answer(
        f'üéÅ {item_data.name}\n\n'
        f'üí∞ –ù–∞–≥—Ä–∞–¥–∞: {item_data.reward}\n\n'
        f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item_data.description}\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá',
        reply_markup=keyboard.adjust(2).as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == 'to_main')
async def back_to_main(callback: CallbackQuery):
    await callback.message.delete()  
    await callback.message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ üõçÔ∏è\n"
        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üÜò\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üí∞",
        reply_markup=main_kb
    )
    await callback.answer()

@router.callback_query(F.data == 'back_to_categories')
async def back_to_categories(callback: CallbackQuery):
    await callback.message.delete()  
    await callback.message.answer(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=await categories()
    )
    await callback.answer()

class SupportState(StatesGroup):
    waiting_for_support_message = State()

@router.callback_query(F.data == 'TP_room')
async def TP_room(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    await state.set_state(SupportState.waiting_for_support_message)
    await callback.answer()

@router.message(Command("cancel"), ~StateFilter(None))
async def cancel_support(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == SupportState.waiting_for_support_message:
        await state.clear()
        await message.answer(
            "‚ùå –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=await categories()
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=await categories()
        )

@router.message(SupportState.waiting_for_support_message)
async def process_support_message(message: Message, state: FSMContext, bot: Bot):
    if message.text.startswith('/'):
        return
        
    SUPPORT_CHAT_ID = 7268834861
    
    try:
        user = await get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        ticket = await create_support_ticket(user.id, message.text)
        
        if not ticket:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
            await state.clear()
            return

        user_info = f"üë§ ID: {message.from_user.id}\n–ò–º—è: {message.from_user.full_name}"
        if message.from_user.username:
            user_info += f"\nüîó @{message.from_user.username}"
        
        await bot.send_message(
            SUPPORT_CHAT_ID,
            f"üÜò –ù–û–í–´–ô –ó–ê–ü–†–û–° #{ticket.id}\n\n"
            f"{user_info}\n"
            f"üïí {ticket.created_at}\n\n"
            f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
        )
        
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üî¢ –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket.id}\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=await categories()
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
            reply_markup=await categories()
        )
    
    finally:
        await state.clear()

class BonusState(StatesGroup):
    waiting_for_bonus_message = State()

@router.callback_query(F.data == 'dop_bonus')
async def dop_bonus(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üí∞ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ë–û–ù–£–°–´ üí∞\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã:\n\n"
        "üîπ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ = +10% –∫ –≤—ã–ø–ª–∞—Ç–µ\n"
        "üîπ 5+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +15% –∫ –≤—ã–ø–ª–∞—Ç–µ\n"
        "üîπ 15+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +30% –∫ –≤—ã–ø–ª–∞—Ç–µ\n\n"
        "üìå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "1. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
        "2. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã\n"
        "3. –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    await state.set_state(BonusState.waiting_for_bonus_message)
    await callback.answer()

@router.message(BonusState.waiting_for_bonus_message)
async def process_bonus_message(message: Message, state: FSMContext, bot: Bot):
    if message.text.startswith('/'):
        return
        
    BONUS_CHAT_ID = 7268834861
    
    try:
        user = await get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        ticket = await create_bonus_ticket(user.id, message.text)
        
        if not ticket:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–Ω—É—Å.")
            await state.clear()
            return

        user_info = f"üë§ ID: {message.from_user.id}\n–ò–º—è: {message.from_user.full_name}"
        if message.from_user.username:
            user_info += f"\nüîó @{message.from_user.username}"
        
        await bot.send_message(
            BONUS_CHAT_ID,
            f"üí∞ –ó–ê–ü–†–û–° –ù–ê –ë–û–ù–£–° #{ticket.id}\n\n"
            f"{user_info}\n"
            f"üïí {ticket.created_at}\n\n"
            f"üìÑ –î–∞–Ω–Ω—ã–µ:\n{message.text}"
        )
        
        await message.answer(
            "üéâ –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–Ω—É—Å –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{ticket.id}\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=await categories()
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=await categories()
        )
    
    finally:
        await state.clear()