import asyncio
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from apps.key import main_kb, categories, items
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import apps.database.requests as rq
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apps.database.models import SupportTicket, BonusTicket, ResponseTickets, User, async_session
from sqlalchemy import select

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    try:
        await rq.set_user(message.from_user.id)
        await message.answer(
            'üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–æ—Ç! üåü\n\n'
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π.',
            reply_markup=main_kb
        )
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá',
            reply_markup=main_kb
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

@router.message(Command("cancel"), ~StateFilter(None))
async def cancel_support(message: Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        if current_state in [SupportState.waiting_for_support_message, BonusState.waiting_for_bonus_message]:
            await state.clear()
            await message.answer(
                "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=await categories()
            )
        else:
            await message.answer(
                "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=await categories()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ cancel_support: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    try:
        await message.answer(
            'üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:',
            reply_markup=await categories()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ catalog: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.")

@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    try:
        await callback.answer('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞')
        category_id = callback.data.split('_')[1]
        await callback.message.answer(
            'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:',
            reply_markup=await items(category_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ category: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@router.callback_query(F.data.startswith('item_'))
async def show_item(callback: CallbackQuery):
    try:
        item_id = callback.data.split('_')[1]
        item_data = await rq.get_item(item_id)
        if not item_data:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', 
            callback_data=f'category_{item_data.category}'
        ))
        keyboard.add(InlineKeyboardButton(
            text='üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 
            callback_data='back_to_categories'
        ))
        keyboard.add(InlineKeyboardButton(
            text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 
            callback_data='to_main'
        ))
        
        await callback.message.answer(
            f'üéÅ {item_data.name}\n\n'
            f'üí∞ –ù–∞–≥—Ä–∞–¥–∞: {item_data.reward}\n\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item_data.description}\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá',
            reply_markup=keyboard.adjust(2).as_markup()
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_item: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

@router.callback_query(F.data == 'to_main')
async def back_to_main(callback: CallbackQuery):
    try:
        await callback.message.delete()
        await callback.message.answer(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ üõç\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üÜò\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ üí∞",
            reply_markup=main_kb
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_main: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

@router.callback_query(F.data == 'back_to_categories')
async def back_to_categories(callback: CallbackQuery):
    try:
        await callback.message.delete()
        await callback.message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=await categories()
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_categories: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")

class SupportState(StatesGroup):
    waiting_for_support_message = State()

@router.callback_query(F.data == 'TP_room')
async def TP_room(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer(
            "üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        await state.set_state(SupportState.waiting_for_support_message)
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ TP_room: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

@router.message(SupportState.waiting_for_support_message)
async def process_support_message(message: Message, state: FSMContext, bot: Bot):
    if message.text.startswith('/'):
        return
        
    SUPPORT_CHAT_ID = 7268834861
    
    try:
        user = await rq.get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        ticket = await rq.create_support_ticket(user.id, message.text)
        if not ticket:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
            await state.clear()
            return

        user_info = f"üë§ ID: {message.from_user.id}\n–ò–º—è: {message.from_user.full_name}"
        if message.from_user.username:
            user_info += f"\nüîó @{message.from_user.username}"
        
        await bot.send_message(
            SUPPORT_CHAT_ID,
            f"üÜò –ù–û–í–´–ô –ó–ê–ü–†–û–° #{ticket.id}\n\n"
            f"{user_info}\n"
            f"üïí {ticket.created_at}\n\n"
            f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
        )
        
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üî¢ –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket.id}\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=await categories()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_support_message: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
            reply_markup=await categories()
        )
    finally:
        await state.clear()

class BonusState(StatesGroup):
    waiting_for_bonus_message = State()

@router.callback_query(F.data == 'dop_bonus')
async def dop_bonus(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer(
            "üí∞ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ë–û–ù–£–°–´ üí∞\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã:\n\n"
            "üîπ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ = +10% –∫ –≤—ã–ø–ª–∞—Ç–µ\n"
            "üîπ 5+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +15% –∫ –≤—ã–ø–ª–∞—Ç–µ\n"
            "üîπ 15+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = +30% –∫ –≤—ã–ø–ª–∞—Ç–µ\n\n"
            "üìå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "1. –°–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
            "2. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã\n"
            "3. –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        await state.set_state(BonusState.waiting_for_bonus_message)
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ dop_bonus: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–æ–Ω—É—Å–æ–≤.")

@router.message(BonusState.waiting_for_bonus_message)
async def process_bonus_message(message: Message, state: FSMContext, bot: Bot):
    if message.text.startswith('/'):
        return
        
    BONUS_CHAT_ID = 7268834861
    
    try:
        user = await rq.get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        ticket = await rq.create_bonus_ticket(user.id, message.text)
        if not ticket:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–Ω—É—Å.")
            await state.clear()
            return
        
        user_info = f"üë§ ID: {message.from_user.id}\n–ò–º—è: {message.from_user.full_name}"
        if message.from_user.username:
            user_info += f"\nüîó @{message.from_user.username}"
        
        await bot.send_message(
            BONUS_CHAT_ID,
            f"üí∞ –ó–ê–ü–†–û–° –ù–ê –ë–û–ù–£–° #{ticket.id}\n\n"
            f"{user_info}\n"
            f"üïí {ticket.created_at}\n\n"
            f"üìÑ –î–∞–Ω–Ω—ã–µ:\n{message.text}"
        )
        
        await message.answer(
            "üéâ –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–Ω—É—Å –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{ticket.id}\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=await categories()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_bonus_message: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=await categories()
        )
    finally:
        await state.clear()

@router.message(Command('ticketsup'))
async def list_support_tickets(message: Message):
    try:
        async with async_session() as session:
            tickets = await session.scalars(select(SupportTicket).order_by(SupportTicket.id))
            tickets = list(tickets)
            if not tickets:
                await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
                return
            
            response = "üÜò –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
            for ticket in tickets:
                user = await session.scalar(select(User).where(User.id == ticket.user_id))
                user_info = f"üë§ TG ID: {user.tg_id if user else '–ù–µ –Ω–∞–π–¥–µ–Ω'}"
                response += (
                    f"üî¢ –¢–∏–∫–µ—Ç #{ticket.id}\n"
                    f"{user_info}\n"
                    f"üïí {ticket.created_at}\n"
                    f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {ticket.message}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {ticket.status}\n\n"
                )
            
            await message.answer(response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ticketsup: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

@router.message(Command('ticketbon'))
async def list_bonus_tickets(message: Message):
    try:
        async with async_session() as session:
            tickets = await session.scalars(select(BonusTicket).order_by(BonusTicket.id))
            tickets = list(tickets)
            if not tickets:
                await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
                return
            
            response = "üí∞ –°–ø–∏—Å–æ–∫ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤:\n\n"
            for ticket in tickets:
                user = await session.scalar(select(User).where(User.id == ticket.user_id))
                user_info = f"üë§ TG ID: {user.tg_id if user else '–ù–µ –Ω–∞–π–¥–µ–Ω'}"
                response += (
                    f"üî¢ –¢–∏–∫–µ—Ç #{ticket.id}\n"
                    f"{user_info}\n"
                    f"üïí {ticket.created_at}\n"
                    f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {ticket.message}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {ticket.status}\n\n"
                )
            
            await message.answer(response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ticketbon: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")

class AnswerState(StatesGroup):
    waiting_for_answer_message = State()

@router.message(Command('answer'))
async def answer_ticket_command(message: Message, state: FSMContext, bot: Bot):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /answer <–Ω–æ–º–µ—Ä_—Ç–∏–∫–µ—Ç–∞> <—Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞>")
        return
    
    try:
        ticket_id = int(args[1])
        answer_text = args[2]
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    try:
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∏–∫–µ—Ç–∞
            support_ticket = await session.scalar(select(SupportTicket).where(SupportTicket.id == ticket_id))
            bonus_ticket = await session.scalar(select(BonusTicket).where(BonusTicket.id == ticket_id))
            
            if not support_ticket and not bonus_ticket:
                await message.answer(f"‚ùå –¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            ticket = support_ticket or bonus_ticket
            user = await session.scalar(select(User).where(User.id == ticket.user_id))
            
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º tg_id –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            user_tg_id = user.tg_id
            if not user_tg_id:
                await message.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG ID.")
                return

            # –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç
            response = ResponseTickets(
                user_id=user.id,
                message=answer_text
            )
            ticket.status = 'closed'
            session.add(response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            try:
                await session.commit()
                print(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}")
            except Exception as commit_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ –≤ answer: {commit_error}")
                await session.rollback()
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ.")
                return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–Ω–µ —Å–µ—Å—Å–∏–∏
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_tg_id} –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}")
            await bot.send_message(
                user_tg_id,
                f"üì¨ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{answer_text}"
            )
            await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
        except Exception as send_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_tg_id}: {send_error}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (TG ID: {user_tg_id}), –Ω–æ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ.")
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ answer: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç.")